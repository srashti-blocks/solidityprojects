// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract UserRegistry {
    struct User {
        string name;
        uint age;
        bool isActive;
    }

    mapping(address => User) private users;

    error UserNotFound(address user);
    error AlreadyRegistered();

    
    function register(string calldata _name, uint _age) external {
        if (users[msg.sender].isActive) {
            revert AlreadyRegistered();
        }
        users[msg.sender] = User(_name, _age, true);
    }

  
    function getUser(address _user) external view returns (string memory, uint) {
        if (!users[_user].isActive) {
            revert UserNotFound(_user);
        }
        User storage u = users[_user];
        return (u.name, u.age);
    }

    
    function updateUser(string calldata _name, uint _age) external {
        User storage u = users[msg.sender];
        if (!u.isActive) {
            revert UserNotFound(msg.sender);
        }
        u.name = _name;
        u.age = _age;
    }

  
    function deleteUser() external {
        if (!users[msg.sender].isActive) {
            revert UserNotFound(msg.sender);
        }
        delete users[msg.sender];
    }
}
